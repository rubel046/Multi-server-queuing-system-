/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package multi_server;

import java.util.Random;
import java.util.Scanner;

/**
 *
 * @author Rubel
 */
public class multiServer extends javax.swing.JFrame {

    /**
     * Creates new form multiServer
     */
    public multiServer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1_sim_time = new javax.swing.JTextField();
        jTextField2_mean_arrival = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1_output = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Execute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1_sim_time.setText(" ");

        jTextField2_mean_arrival.setText(" ");

        jTextArea1_output.setColumns(20);
        jTextArea1_output.setRows(5);
        jScrollPane1.setViewportView(jTextArea1_output);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("         Multi  Server");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("       Input");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("    Output");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText(" Mean Interarrival");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText(" Simulation Time");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1_sim_time)
                            .addComponent(jTextField2_mean_arrival)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2_mean_arrival, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1_sim_time, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  public class city_bus  
    {
        int Queue_size = 3000;
	int next_event_num;
	int num_car_delayed;
	int num_events=3;
	int num_of_car_in_q;
	int server_status;
	int num_delays_required;
	double area_num_of_car_in_q;
	double area_server_status;
	double sim_time;
	double time_last_event;
	double total_delay;
	double mean_interarrival;
	double mean_service;
	double[] time_arrival = new double[Queue_size];
	double[] time_next_event=new double[4];
	

	
	int Queue_size2 = 3000;
	int num_car_delayed2;
	int num_of_car_in_q2;
	int server_status2;
	int num_delays_required2;
	double area_num_of_car_in_q2;
	double area_server_status2;
	double time_last_event2;
	double total_delay2;
	double mean_interarrival2;
	double mean_service2;
	double[] time_arrival2 = new double[Queue_size2];
	
	
	
	public void initialize()
	{
		sim_time = 0;
		server_status = 0;
		num_of_car_in_q = 0;
		time_last_event = 0;
		num_car_delayed = 0;
		total_delay = 0;
		area_num_of_car_in_q = 0;
		area_server_status = 0;
		time_next_event[1] = sim_time +  expon(mean_interarrival) ;
		time_next_event[2] = 1.0e+30;
		time_next_event[3] = 1.0e+30;
		server_status2 = 0;
		num_of_car_in_q2 = 0;
		time_last_event2 = 0;
		num_car_delayed2 = 0;
		total_delay2 = 0;
		area_num_of_car_in_q2 = 0;
		area_server_status2 = 0;
		//time_next_event[1] = sim_time + test.expon(mean_interarrival) ;
		//time_next_event[2] = 1.0e+30;
	}
	 
	public void timing()
	{
		int   i;
		double min_time_ofnext_event = 1.0e+29;
		 
		next_event_num = 0;
		 
		for (i = 1; i <= num_events; ++i)
		{
			if (time_next_event[i] < min_time_ofnext_event)
			{
				min_time_ofnext_event = time_next_event[i];
				next_event_num = i;
			}
		}
		 
		 
		if (next_event_num == 0)
		{
			System.out.println("\nEvent list empty at time"+ sim_time);
		}
		 
		sim_time = min_time_ofnext_event;
		
	}
	
	
	public void timing1()
	{
		int   i;
		double min_time_ofnext_event = 1.0e+29;
		 
		next_event_num = 0;
		 
		for (i = 2; i <= num_events; ++i)
		{
			if (time_next_event[i] < min_time_ofnext_event)
			{
				min_time_ofnext_event = time_next_event[i];
				next_event_num = i;
			}
		}
		 
		 
		if (next_event_num == 0)
		{
			System.out.println("\nEvent list empty at time"+ sim_time);
		}
		 
		sim_time = min_time_ofnext_event;
		
	}
	

	
	public void arrive(double time)
	{
		double delay;
		 
		time_next_event[1] = time;
		 
		if (server_status == 1)
		{
			num_of_car_in_q++;
			if(num_of_car_in_q>Queue_size)
		       {
			System.out.println("overflow of the array time_arrival at "+sim_time);
			System.exit(1);
		       }
			time_arrival[num_of_car_in_q] = sim_time;
		}
		 
		else
		{
			delay = 0;
			total_delay += delay;
			num_car_delayed++;
			server_status = 1;
			time_next_event[2] = sim_time +  expon(mean_interarrival);
		}
	}
	
	
	public void arrive2(double time)
	{
		double delay2;
		 
		if (server_status2 == 1)
		{
			num_of_car_in_q2++;
			if(num_of_car_in_q2>Queue_size2)
		       {
			System.out.println("overflow of the array time_arrival at "+sim_time);
			System.exit(1);
		       }
			time_arrival2[num_of_car_in_q2] = sim_time;
		}
		 
		else
		{
			delay2 = 0;
			total_delay2 += delay2;
			num_car_delayed2++;
			server_status2 = 1;
			time_next_event[3] = sim_time +  expon(mean_interarrival);
		}
	}
		

	public void depart()
	{
		int   i;
		double delay_in_q;
		if (num_of_car_in_q == 0)
		{
			server_status = 0;
			time_next_event[2] = 1.0e+30;
		}
		 
		else
		{
			num_of_car_in_q--;
			delay_in_q = sim_time - time_arrival[1];
			total_delay += delay_in_q;
			num_car_delayed++;
			time_next_event[2] = sim_time +  expon(mean_interarrival);
			for (i = 1; i <= num_of_car_in_q; i++)
			time_arrival[i] = time_arrival[i + 1];
			
		}
	}
	
	
	public void depart2()
	{
		int   i;
		double delay_in_q2;
		 
		if (num_of_car_in_q2 == 0)
		{
			server_status2 = 0;
			time_next_event[3] = 1.0e+30;
		}
		 
		else
		{
			num_of_car_in_q2--;
			delay_in_q2 = sim_time - time_arrival2[1];
			total_delay2 += delay_in_q2;
			num_car_delayed2++;
			time_next_event[3] = sim_time +  expon(mean_interarrival);
			for (i = 1; i <= num_of_car_in_q2; i++)
			time_arrival2[i] = time_arrival2[i + 1];
		}
	}
	
	public void report()
	{
		//System.out.println( "Total car uses this server " + num_car_delayed + "\n");
		//System.out.println( "Average delay in queue " + total_delay / num_car_delayed + "\n");
		//System.out.println( "Average number in queue  " + avg_num_of_car_in_q / sim_time + "\n");
		//System.out.println( "Server utilization  " + area_server_status / sim_time + "\n");
            jTextArea1_output.append("\n"+"Total car uses this server " + num_car_delayed + "\n");
            jTextArea1_output.append("Average delay in queue " + total_delay / num_car_delayed + "\n");
            jTextArea1_output.append("Server utilization  " + area_server_status / sim_time + "\n");
		
	}
	
	
	public void report2()
	{
		//System.out.println( "Total car uses this server " + num_car_delayed2 + "\n");
		//System.out.println( "Average delay in queue " + total_delay2 / num_car_delayed2 + "\n");
		//System.out.println( "Average number in queue  " + avg_num_of_car_in_q / sim_time + "\n");
		//System.out.println( "Server utilization  " + area_server_status2 / sim_time + "\n");
		//System.out.println( "simulation ended  " + sim_time + "\n");
                
            jTextArea1_output.append("\n"+"Total car uses this server " + num_car_delayed2 + "\n");
            jTextArea1_output.append("Average delay in queue " + total_delay2 / num_car_delayed2 + "\n");
            jTextArea1_output.append("Server utilization  " + area_server_status2 / sim_time + "\n\n");
	}
	
	
	
	public void update_time_avg()
	{
		double time_update_last_event;
		time_update_last_event = sim_time - time_last_event;
		time_last_event = sim_time;
		area_num_of_car_in_q += num_of_car_in_q * time_update_last_event;
		area_server_status += server_status * time_update_last_event;
	}
	
	
	public void update_time_avg2()
	{
		double time_update_last_event2;
		time_update_last_event2 = sim_time - time_last_event2;
		time_last_event2 = sim_time;
		area_num_of_car_in_q2 += num_of_car_in_q2 * time_update_last_event2;
		area_server_status2 += server_status2 * time_update_last_event2;
	}
	
  }
    

  public   void server1_activity()
		{
			 inspection.timing();
			switch (inspection.next_event_num)
			{
				case 1: inspection.arrive(inspection.sim_time+expon(inspection.mean_interarrival));
				inspection.update_time_avg();
				break;
				case 2: inspection.depart();
						inspection.update_time_avg();
						if(random.nextDouble() <= 0.3)
							server2_activity(inspection.sim_time);
				
						break;
				case 3: inspection.depart2();
						inspection.update_time_avg2();
			}
		}
		public  void server2_activity(double time)
		{
	
			inspection.arrive2(time);
			inspection.update_time_avg2();
			
		}
		
		public    void after_end_simtime_server1_activity()
		{
			inspection.timing1();
			switch (inspection.next_event_num)
			{
				
				case 2: inspection.depart();
					inspection.update_time_avg();
					if(random.nextDouble() <= 0.3)
						server2_activity(inspection.sim_time);				
					break;
				case 3: inspection.depart2();
					inspection.update_time_avg2();
			}
		}
	
		public   double expon(double  mean)
		{
			return -mean * Math.log(random.nextDouble());
		}
		
  
  
    city_bus inspection= new city_bus();
    Random random;
    Scanner sc = new Scanner(System.in);
        
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
            //System.out.print("Enter Mean interarrival time in minute: ");	
	    inspection.mean_interarrival= Double.valueOf(jTextField2_mean_arrival.getText().toString());
		
		random = new Random();
		inspection.initialize();
	
		//System.out.print("Enter simulation time in minute: ");	

		double sim_time= Double.valueOf(jTextField1_sim_time.getText().toString());
		
		while(inspection.sim_time <= sim_time)
		{
		server1_activity();
		}
		
		//System.out.println("\n\n For inspection server :");
                 jTextArea1_output.append("\n\n For inspection server :");
		inspection.report();
		//System.out.println("\n\n For repair server :");
                jTextArea1_output.append("\n\n For repair server :");
		inspection.report2();
		

		while(inspection.num_of_car_in_q!=0)
		 { 
			after_end_simtime_server1_activity();
		 }
		//System.out.println("\n\n After simulation time end for queue 1:");
                 jTextArea1_output.append("\n\n After simulation time ended if  queue 1 not empty");
		//System.out.println("\n\n For inspection server :");
                jTextArea1_output.append("\n\n For inspection server :");
		inspection.report();
		//System.out.println("\n\n For repair server :");
                jTextArea1_output.append("\n\n For repair server :");
		inspection.report2();
		
		 while(inspection.num_of_car_in_q2!=0)
		 {
			 inspection.depart2();
			 inspection.update_time_avg2();
			 
		 }
		// System.out.println("\n\n After simulation time end for queue 2:");
                 jTextArea1_output.append("\n\n After simulation time ended if  queue 2 not empty");
		//System.out.println("\n\n For inspection server :");
                // jTextArea1_output.append("\n\n For inspection server :");
		//inspection.report();
		//System.out.println("\n\n For repair server :");
                jTextArea1_output.append("\n\n For repair server :");
		inspection.report2();
		//System.out.println("\n\nTime simulation ended "+ (repair.sim_time) +"\n");
		//System.out.println("Avarage waiting time in system "+ (repair.sim_time / inspection.num_car_delayed) +"\n");
    
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(multiServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(multiServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(multiServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(multiServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
       
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new multiServer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1_output;
    private javax.swing.JTextField jTextField1_sim_time;
    private javax.swing.JTextField jTextField2_mean_arrival;
    // End of variables declaration//GEN-END:variables
}
